React.js Notes
1. Introduction to React.js

1.1. VS Code and Emmet
Emmet in VS Code: Emmet is a powerful toolkit for web developers, and in Visual Studio Code, it can be utilized to generate code snippets quickly. For instance, typing `html:5` and hitting enter creates a basic HTML5 template.

1.2. JavaScript in Browser Console
Developer Console and Elements: Developers can execute JavaScript directly in the browser console, inspecting and manipulating the HTML elements using JavaScript code.

1.3. Basic JavaScript DOM Manipulation
html
<script>
    const heading = document.createElement("h1");
    heading.innerHTML = "Hello World from JavaScript!"

    const root = document.getElementById("root")
    root.appendChild(heading);
</script>

JavaScript DOM Manipulation: This script demonstrates the creation of an `h1` element, setting its content, and appending it to an element with the ID "root" using JavaScript APIs.

2. Getting React into a Project

2.1. Using CDN (Content Delivery Network)
React as JavaScript Code: React, at its core, is JavaScript code. It can be incorporated into a project by pulling it from a Content Delivery Network (CDN), where the React library is hosted.
Two CDN Files:
`react.development.js`: Core functionality of React.
 `react-dom.development.js`: Handles DOM operations, acting as a bridge between React and the browser.

2.2. React Basics
- React Element Creation:
  - `createElement("tag", {attributes}, "content")`: React elements are created using this method, where attributes are provided in an object.
- Rendering in Root:
  - All DOM operations are performed in a specified root using `ReactDOM.createRoot(document.getElementById());`.

2.3. ReactDOM
- `root.render(heading);`: React elements are rendered in the root, and React takes precedence over JavaScript and HTML in the rendering process.

3. Key Observations

3.1. React Precedence
- React Takes Precedence: React components take precedence in the rendering process. The virtual DOM allows React to manage rendering separately from regular DOM manipulation.

3.2. Costly DOM Operations
- DOM Manipulation Complexity: Traditional DOM manipulation is resource-intensive. React optimizes this by efficiently manipulating the DOM using JavaScript.

4. Important Concepts

4.1. Cross-Origin and CDN
1.Cross-Origin:  
 - `crossorigin` Attribute: In the script tag, the `crossorigin` attribute is set to "anonymous" to fetch the React library from a different domain without sending credentials.
   - Ensures security when incorporating external scripts into a web page.

2. CDN (Content Delivery Network):
   - CDN Definition: A Content Delivery Network is a network of servers strategically placed globally to deliver web content efficiently.
   - React libraries are hosted on a CDN, enhancing performance by allowing users to fetch resources from the nearest server.

4.2. Nested Elements in React
Example 1: Single Child:

  const parent = React.createElement("div", {id: "parent"},
    React.createElement("div", {id: "child"},
      React.createElement("div", {}, "I am an h1 tag")
    )
  );
 
Example 2: Multiple Siblings:
 
  const parent = React.createElement("div", {id: "parent"},
    React.createElement("div", {id: "child"},
      [
        React.createElement("div", {}, "I am an h1 tag"),
        React.createElement("div", {}, "I am an h1 tag")
      ]
    )
  );

  - Handling multiple siblings requires the third argument in `createElement` to be an array.

4.3. JSX and Order of Script
- JSX Simplifies Nested Structures: JSX, a syntax extension for JavaScript, simplifies the creation of nested structures in React.
- Order of Script Execution: The sequence in which scripts are executed is crucial. Placing the React CDN before the project's JS code is important.

5. Framework vs. Library

5.1. React as a Library
React's Applicability: React can be applied to a small portion of a page, making it a library rather than a full-fledged framework.
Rendering with `createRoot`: React, at its core, is a barebones JavaScript library. It renders using the `createRoot` method.

5.2. Difference Between Library and Framework
Library Definition: A library provides tools that developers can use, giving them control over the flow of the application.
Framework Definition: A framework dictates the control flow with a set structure and guidelines to follow.
Both Aim at Code Reuse: Both libraries and frameworks aim at promoting code reuse and simplifying the development process but differ in their levels of abstraction and the roles they play in application development.

